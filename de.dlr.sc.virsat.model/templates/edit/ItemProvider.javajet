<%@ jet package="org.eclipse.emf.codegen.ecore.templates.edit" imports="java.util.* org.eclipse.emf.codegen.ecore.genmodel.*" class="ItemProvider"%>
<%
/**
 * Copyright (c) 2002-2007 IBM Corporation and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   IBM - Initial API and implementation
 *   DLR - customization for Virtual Satellite
 */
%>

<%final String MODEL_CLASS_VALUE_PROPERTY_INSTANCE = "ValuePropertyInstance";%>
<%final String MODEL_CLASS_RESOURCE_PROPERTY_INSTANCE = "ResourcePropertyInstance";%>
<%final String MODEL_CLASS_REFERENCE_PROPERTY_INSTANCE = "ReferencePropertyInstance";%>
<%final String MODEL_CLASS_UNIT_VALUE_PROPERTY_INSTANCE = "UnitValuePropertyInstance";%>
<%final String MODEL_CLASS_A_TYPE_INSTANCE = "ATypeInstance";%>
<%final String MODEL_CLASS_I_CATEGORY_ASSIGNMENT_CONTAINER = "ICategoryAssignmentContainer";%>
<%final String MODEL_CLASS_STRUCTURAL_ELEMENT_INSTANCE = "StructuralElementInstance";%>
<%final String MODEL_CLASS_CATEGORY_ASSIGNMENT = "CategoryAssignment";%>
<%final String MODEL_CLASS_STRUCTURAL_ELEMENT = "StructuralElement";%>
<%final String MODEL_CLASS_CATEGORY = "Category";%>
<%final String MODEL_CLASS_REPOSITORY = "Repository";%>
<%final String MODEL_CLASS_ROLEMANAGEMENT = "RoleManagement";%>
<%final String MODEL_CLASS_UNITMANAGEMENT = "UnitManagement";%>
<%final String MODEL_CLASS_ARRAYINSTANCE = "ArrayInstance";%>
<%final String MODEL_CLASS_AUNIT = "AUnit";%>
<%final String MODEL_CLASS_PREFIX = "Prefix";%>


<%GenClass genClass = (GenClass)argument; GenPackage genPackage = genClass.getGenPackage(); GenModel genModel=genPackage.getGenModel();%>
<%@ include file="../Header.javajetinc"%>
package <%=genPackage.getProviderPackageName()%>;


<%
/*
 * *********************************
 * VirSat Specific Code Generation
 * *********************************
 * Loop over all Interfaces and Extended Classes to find the one defining ATypeInstance
 * Remember it in case it exists. Information will be used later in the code to resolve a custom image for these classes
 */
boolean isInstanceOfValuePropertyInstance = MODEL_CLASS_VALUE_PROPERTY_INSTANCE.equals(genClass.getName());
boolean isInstanceOfResourcePropertyInstance = MODEL_CLASS_RESOURCE_PROPERTY_INSTANCE.equals(genClass.getName());
boolean isInstanceOfReferencePropertyInstance = MODEL_CLASS_REFERENCE_PROPERTY_INSTANCE.equals(genClass.getName());
boolean isInstanceOfUnitValuePropertyInstance = MODEL_CLASS_UNIT_VALUE_PROPERTY_INSTANCE.equals(genClass.getName());
boolean isInstanceOfATypeInstance = genClass.getAllBaseGenClasses().stream().anyMatch((GenClass predicate) -> MODEL_CLASS_A_TYPE_INSTANCE.equals(predicate.getInterfaceName()));
boolean isInstanceOfICategoryAssignmentContainer = genClass.getAllBaseGenClasses().stream().anyMatch((GenClass predicate) -> MODEL_CLASS_I_CATEGORY_ASSIGNMENT_CONTAINER.equals(predicate.getInterfaceName()));
boolean isInstanceOfStructuralElementInstance = MODEL_CLASS_STRUCTURAL_ELEMENT_INSTANCE.equals(genClass.getName());
boolean isInstanceOfStructuralElement = MODEL_CLASS_STRUCTURAL_ELEMENT.equals(genClass.getName());
boolean isInstanceOfCategory = MODEL_CLASS_CATEGORY.equals(genClass.getName());
boolean isInstanceOfCategoryAssignment = MODEL_CLASS_CATEGORY_ASSIGNMENT.equals(genClass.getName());
boolean isInstanceOfRepository = MODEL_CLASS_REPOSITORY.equals(genClass.getName());
boolean isInstanceOfRoleManagement = MODEL_CLASS_ROLEMANAGEMENT.equals(genClass.getName());
boolean isInstanceOfUnitManagement = MODEL_CLASS_UNITMANAGEMENT.equals(genClass.getName());
boolean isInstanceOfArrayInstance = MODEL_CLASS_ARRAYINSTANCE.equals(genClass.getName());
boolean isInstanceOfAUnit = genClass.getAllBaseGenClasses().stream().anyMatch((GenClass predicate) -> MODEL_CLASS_AUNIT.equals(predicate.getInterfaceName()));
boolean isInstanceOfPrefix = MODEL_CLASS_PREFIX.equals(genClass.getName());

//System.out.println("ClassName: " + String.format("%25s", genClass.getName()) + "  ATypeInstance: " + isInstanceOfATypeInstance + "  Repository: " + isInstanceOfRepository);
%>
<%genModel.addImport("org.eclipse.emf.common.notify.AdapterFactory");%>
<%genModel.addImport("org.eclipse.emf.common.notify.Notification");%>
<%genModel.addImport("org.eclipse.emf.common.command.Command");%>
<%genModel.addImport("org.eclipse.emf.edit.command.CommandParameter");%>
<%genModel.addImport("org.eclipse.emf.edit.domain.EditingDomain");%>
<%genModel.addImport("de.dlr.sc.virsat.model.dvlm.roles.RoleManagementCheckCommand");%>

<%String _List = genModel.getImportedName(genModel.useGenerics() ? "java.util.List<org.eclipse.emf.edit.provider.IItemPropertyDescriptor>" : "java.util.List");%>
<%genModel.markImportLocation(stringBuffer);%>

/**
 * This is the item provider adapter for a {@link <%=genClass.getQualifiedInterfaceName()%>} object.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class <%=genClass.getProviderClassName()%> <%if (genClass.getProviderImplementsClassNames().isEmpty()) {%>extends <%=genClass.getProviderBaseClassName() != null ? genClass.getProviderBaseClassName() : genModel.getImportedName("org.eclipse.emf.edit.provider.ItemProviderAdapter")%><%}%>
<%if (!genClass.getProviderImplementsClassNames().isEmpty()) {%>
	extends <%=genClass.getProviderBaseClassName() != null ? genClass.getProviderBaseClassName() : genModel.getImportedName("org.eclipse.emf.edit.provider.ItemProviderAdapter")%>
	implements
  <%for (Iterator<String> i = genClass.getProviderImplementsClassNames().iterator(); i.hasNext(); ) {%>
		<%=genModel.getImportedName(i.next())%><%if (i.hasNext()){%>,<%}%>
  <%}%>
<%}%>
{
<%if (genModel.hasCopyrightField()) {%>
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final <%=genModel.getImportedName("java.lang.String")%> copyright = <%=genModel.getCopyrightFieldLiteral()%>;<%=genModel.getNonNLS()%>

<%}%>
	/**
	 * This constructs an instance from a factory and a notifier.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public <%=genClass.getProviderClassName()%>(AdapterFactory adapterFactory)
	{
		super(adapterFactory);
	}

	/**
	 * This returns the property descriptors for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
<%if (genModel.useClassOverrideAnnotation()) {%>
	@Override
<%}%>
	public <%=_List%> getPropertyDescriptors(Object object)
	{
		if (itemPropertyDescriptors == null)
		{
			super.getPropertyDescriptors(object);

<%for (GenFeature genFeature : genClass.getPropertyFeatures()) { %>
			add<%=genFeature.getCapName()%>PropertyDescriptor(object);
<%}%>
		}
		return itemPropertyDescriptors;
	}

<%for (GenFeature genFeature : genClass.getPropertyFeatures()) { %>
	/**
	 * This adds a property descriptor for the <%=genFeature.getFormattedName()%> feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected void add<%=genFeature.getCapName()%>PropertyDescriptor(Object object)
	{
<%@ include file="ItemProvider/addPropertyDescriptor.override.javajetinc" fail="alternative" %>
<%@ start %>
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((<%=genModel.getImportedName("org.eclipse.emf.edit.provider.ComposeableAdapterFactory")%>)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_<%=genFeature.getGenClass().getName()%>_<%=genFeature.getName()%>_feature"),<%=genModel.getNonNLS()%>
  <%if (genFeature.getPropertyDescription() == null || genFeature.getPropertyDescription().length() == 0) {%>
				 getString("_UI_PropertyDescriptor_description", "_UI_<%=genFeature.getGenClass().getName()%>_<%=genFeature.getName()%>_feature", "_UI_<%=genFeature.getGenClass().getName()%>_type"),<%=genModel.getNonNLS()%><%=genModel.getNonNLS(2)%><%=genModel.getNonNLS(3)%>
  <%} else {%>
				 getString("_UI_<%=genFeature.getGenClass().getName()%>_<%=genFeature.getName()%>_description"),<%=genModel.getNonNLS()%>
  <%}%>
				 <%=genFeature.getQualifiedFeatureAccessor()%>,
				 <%=genFeature.getProperty() == GenPropertyKind.EDITABLE_LITERAL ? "true" : "false"%>,
				 <%=genFeature.isPropertyMultiLine() ? "true" : "false"%>,
				 <%=genFeature.isPropertySortChoices() ? "true" : "false"%>,
  <%if (genFeature.isReferenceType()) {%>
				 null,
  <%} else {%>
				 <%=genModel.getImportedName("org.eclipse.emf.edit.provider.ItemPropertyDescriptor")%>.<%=genFeature.getPropertyImageName()%>,
  <%}%>
  <%if (genFeature.getPropertyCategory() == null || genFeature.getPropertyCategory().length() == 0) {%>
				 null,
  <%} else {%>
				 getString("<%=genModel.getPropertyCategoryKey(genFeature.getPropertyCategory())%>"),<%=genModel.getNonNLS()%>
  <%}%>
  <%if (genFeature.getPropertyFilterFlags().isEmpty()) {%>
				 null));
  <%} else {%>
				 new String[] {
    <%for (Iterator<String> j = genFeature.getPropertyFilterFlags().iterator(); j.hasNext();) { String filterFlag = j.next();%>
      <%if (filterFlag != null && filterFlag.length() > 0) {%>
					"<%=filterFlag%>"<%if (j.hasNext()) {%>,<%}%><%=genModel.getNonNLS()%>
      <%}%>
    <%}%>
				 }));
  <%}%>
<%@ end %><%//ItemProvider/addPropertyDescriptor.override.javajetinc%>
	}

<%}%>
<%if (!genClass.getChildrenFeatures().isEmpty()) {%>
	/**
	 * This specifies how to implement {@link #getChildren} and is used to deduce an appropriate feature for an
	 * {@link org.eclipse.emf.edit.command.AddCommand}, {@link org.eclipse.emf.edit.command.RemoveCommand} or
	 * {@link org.eclipse.emf.edit.command.MoveCommand} in {@link #createCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
<%if (genModel.useClassOverrideAnnotation()) {%>
	@Override
<%}%>
	public <%=genModel.getImportedName(genModel.useGenerics() ? "java.util.Collection<? extends org.eclipse.emf.ecore.EStructuralFeature>" : "java.util.Collection")%> getChildrenFeatures(Object object)
	{
		if (childrenFeatures == null)
		{
			super.getChildrenFeatures(object);
<%for (GenFeature genFeature : genClass.getChildrenFeatures()) { %>
			childrenFeatures.add(<%=genFeature.getQualifiedFeatureAccessor()%>);
<%}%>
		}
		return childrenFeatures;
	}

<%if (!genClass.getChildrenFeatures().isEmpty()) {%>
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
<%if (genModel.useClassOverrideAnnotation()) {%>
	@Override
<%}%>
	protected <%=genModel.getImportedName("org.eclipse.emf.ecore.EStructuralFeature")%> getChildFeature(Object object, Object child)
	{
		// Check the type of the specified child object and return the proper feature to use for
		// adding (see {@link AddCommand}) it as a child.

		return super.getChildFeature(object, child);
	}

<%}%>
<%}%>
<%if (genClass.needsHasChildrenMethodOverride()) {%>
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
<%if (genModel.useClassOverrideAnnotation()) {%>
	@Override
<%}%>
	public boolean hasChildren(Object object)
	{
		return hasChildren(object, <%=genModel.isOptimizedHasChildren()%>);
	}

<%}%>
<%if (genClass.isImage()) {%>
	/**
	 * *********************************
	 * VirSat Specific Code Generation
	 * *********************************
	 * This returns <%=genClass.getName()%>.gif.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
<%if (genModel.useClassOverrideAnnotation()) {%>
	@Override
<%}%>
	public Object getImage(Object object)
	{
	<%if (isInstanceOfATypeInstance | isInstanceOfStructuralElementInstance | isInstanceOfStructuralElement | isInstanceOfCategory) {
		genModel.getImportedName("de.dlr.sc.virsat.model.dvlm.provider.DVLMEditPlugin");
		genModel.getImportedName("java.net.URL");
		genModel.getImportedName("de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance");
		genModel.getImportedName("de.dlr.sc.virsat.model.dvlm.general.IQualifiedName");
		genModel.getImportedName("de.dlr.sc.virsat.model.dvlm.structural.StructuralElement");
		genModel.getImportedName("de.dlr.sc.virsat.model.dvlm.categories.Category");
		genModel.getImportedName("de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance");%> 
		Object rtrnObj = overlayImage(object, getResourceLocator().getImage("full/obj16/<%=genClass.getName()%>")); 
		
		// In case we can find a trace to an object typed by IQualifedName we might have an alternative image
		IQualifiedName qualifiedNameObject = null;
		if (object instanceof ATypeInstance) {
			ATypeInstance typeInstance = (ATypeInstance) object;
			qualifiedNameObject = typeInstance.getType();
		} else if (object instanceof StructuralElementInstance) { 
			StructuralElementInstance structuralElementInstance = (StructuralElementInstance) object;
			qualifiedNameObject = structuralElementInstance.getType();			
		} else if (object instanceof StructuralElement) { 
			qualifiedNameObject = (StructuralElement) object;		
		} else if (object instanceof Category) { 
			qualifiedNameObject = (Category) object;		
		}
		
		// In case we could trace an object of IQualifedName we now ask the image registry for an alternative image
		if (qualifiedNameObject != null) {
			String fullQualifiedID = qualifiedNameObject.getFullQualifiedName();
			URL imageUrl = DVLMEditPlugin.getImageRegistry().get(fullQualifiedID);
			if (imageUrl != null) {
				rtrnObj = overlayImage(object, imageUrl);
			}
		}
		return rtrnObj;
	}
	<%} else {%>
		return overlayImage(object, getResourceLocator().getImage("full/obj16/<%=genClass.getName()%>")); <%=genModel.getNonNLS()%>
	}
	<%}%>
<%}%>
<%if (genModel.getRuntimeVersion().getValue() >= GenRuntimeVersion.EMF26_VALUE && !genModel.isCreationIcons()) {%>
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
<%if (genModel.useClassOverrideAnnotation()) {%>
	@Override
<%}%>
	protected boolean shouldComposeCreationImage() 
	{
		return true;
	}

<%}%>

	/**
	 * *********************************
	 * VirSat Specific Code Generation
	 * *********************************
	 * This returns the label text for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
<%if (genModel.useClassOverrideAnnotation()) {%>
	@Override
<%}%>
	public String getText(Object object)
	{
<%@ include file="ItemProvider/getText.override.javajetinc" fail="alternative" %>
<%@ start %>

<%if (isInstanceOfRepository | isInstanceOfRoleManagement | isInstanceOfUnitManagement) {%>
	return getString("_UI_<%=genClass.getName()%>_type");<%=genModel.getNonNLS()%>
<%} %>
<% else {%>
	<%if (isInstanceOfAUnit) {%> 
		String labelName =((<%=genClass.getImportedInterfaceName()%><%=genClass.getInterfaceWildTypeArguments()%>)object).getName();<%=genModel.getNonNLS()%>
		String label =((<%=genClass.getImportedInterfaceName()%><%=genClass.getInterfaceWildTypeArguments()%>)object).<%=genClass.getLabelFeature().getGetAccessor()%>();
		return labelName + ": " + label;<%=genModel.getNonNLS()%> 
	<%}
	else {%>	
	<%if (isInstanceOfPrefix) {%> 
		String labelName =((<%=genClass.getImportedInterfaceName()%><%=genClass.getInterfaceWildTypeArguments()%>)object).getName();<%=genModel.getNonNLS()%>
		String label =((<%=genClass.getImportedInterfaceName()%><%=genClass.getInterfaceWildTypeArguments()%>)object).<%=genClass.getLabelFeature().getGetAccessor()%>();
		return labelName + ": " + label;<%=genModel.getNonNLS()%> 
	<%}
	else {%>	
	<%if (genModel.isStyleProviders()) {%>
			return ((<%=genModel.getImportedName("org.eclipse.emf.edit.provider.StyledString")%>)getStyledText(object)).getString();
	<%} else {%>
	<%if (genClass.isMapEntry()) {%>
			<%=genClass.getImportedInterfaceName()%><%if (genModel.useGenerics()) {%><?, ?><%}%> <%=genClass.getSafeUncapName()%> = (<%=genClass.getImportedInterfaceName()%><%if (genModel.useGenerics()) {%><?, ?><%}%>)object;
  	<%if (!genClass.getMapEntryKeyFeature().isPropertyMultiLine() && !genClass.getMapEntryValueFeature().isPropertyMultiLine()) {%>
			return "" + <%=genClass.getSafeUncapName()%>.getKey() + " -> " + <%=genClass.getSafeUncapName()%>.getValue();<%=genModel.getNonNLS()%><%=genModel.getNonNLS(2)%>
  	<%} else {%>
    	<%if (genClass.getMapEntryKeyFeature().isPropertyMultiLine()) {%>
			String key = crop("" + <%=genClass.getSafeUncapName()%>.getKey());<%=genModel.getNonNLS()%>
    	<%} else {%>
			String key = "" + <%=genClass.getSafeUncapName()%>.getKey();<%=genModel.getNonNLS()%>
    	<%}%>
    	<%if (genClass.getMapEntryValueFeature().isPropertyMultiLine()) {%>
			String value = crop("" + <%=genClass.getSafeUncapName()%>.getValue());<%=genModel.getNonNLS()%>
    	<%} else {%>
			String value = "" + <%=genClass.getSafeUncapName()%>.getValue();<%=genModel.getNonNLS()%>
    	<%}%>
			return key + " -> " + value;<%=genModel.getNonNLS()%>
  	
  	<%}%>
	<%} else if (genClass.getLabelFeature() != null) { GenFeature labelFeature = genClass.getLabelFeature();%>
  	<%if (labelFeature.isPrimitiveType() && !labelFeature.getGenClass().isDynamic() && !labelFeature.isSuppressedGetVisibility()) {%>
			<%=genClass.getImportedInterfaceName()%><%=genClass.getInterfaceWildTypeArguments()%> <%=genClass.getSafeUncapName()%> = (<%=genClass.getImportedInterfaceName()%><%=genClass.getInterfaceWildTypeArguments()%>)object;
			return getString("_UI_<%=genClass.getName()%>_type") + " " + <%=genClass.getSafeUncapName()%>.<%=genClass.getLabelFeature().getGetAccessor()%>();<%=genModel.getNonNLS()%><%=genModel.getNonNLS(2)%>
  	<%} else {%>
    	<%if (labelFeature.isStringType() && !labelFeature.getGenClass().isDynamic() && !labelFeature.isSuppressedGetVisibility()) {%>
      	<%if (labelFeature.isPropertyMultiLine()) {%>
			String label = crop(((<%=genClass.getImportedInterfaceName()%><%=genClass.getInterfaceWildTypeArguments()%>)object).<%=labelFeature.getGetAccessor()%>());
      	<%} else {%>
			String label = ((<%=genClass.getImportedInterfaceName()%><%=genClass.getInterfaceWildTypeArguments()%>)object).<%=labelFeature.getGetAccessor()%>();
      	<%}%>
    	<%} else {%>
      	<%if (labelFeature.isSuppressedGetVisibility() || labelFeature.getGenClass().isDynamic()) {%>
			<%=genModel.getImportedName("java.lang.Object")%> labelValue = ((<%=genModel.getImportedName("org.eclipse.emf.ecore.EObject")%>)object).eGet(<%=labelFeature.getQualifiedFeatureAccessor()%>);
      	<%} else {%>
			<%=labelFeature.getRawImportedType()%> labelValue = ((<%=genClass.getImportedInterfaceName()%><%=genClass.getInterfaceWildTypeArguments()%>)object).<%=labelFeature.getGetAccessor()%>();
      	<%}%>
			String label = labelValue == null ? null : labelValue.toString();
    	<%}%>
			return label == null || label.length() == 0 ?
				getString("_UI_<%=genClass.getName()%>_type") :<%=genModel.getNonNLS()%>
				getString("_UI_<%=genClass.getName()%>_type") + " " + label;<%=genModel.getNonNLS()%><%=genModel.getNonNLS(2)%>
  	<%}%>
	<%} else {%>
			return getString("_UI_<%=genClass.getName()%>_type");<%=genModel.getNonNLS()%>
	<%}%>
<%}%>
<%}%>
<%}%>
<%}%>
<%@ end %><%//ItemProvider/getText.override.javajetinc%>
	}
	
<%if (genModel.isStyleProviders()) {%>
	/**
	 * This returns the label styled text for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
<%if (genModel.useClassOverrideAnnotation()) {%>
	@Override
<%}%>
	public Object getStyledText(Object object)
	{
<%@ include file="ItemProvider/getStyledText.override.javajetinc" fail="alternative" %>
<%@ start %>
<%if (genClass.isMapEntry()) {%>
		<%=genClass.getImportedInterfaceName()%><%if (genModel.useGenerics()) {%><?, ?><%}%> <%=genClass.getSafeUncapName()%> = (<%=genClass.getImportedInterfaceName()%><%if (genModel.useGenerics()) {%><?, ?><%}%>)object;
  <%if (!genClass.getMapEntryKeyFeature().isPropertyMultiLine() && !genClass.getMapEntryValueFeature().isPropertyMultiLine()) {%>
		return new <%=genModel.getImportedName("org.eclipse.emf.edit.provider.StyledString")%>("" + <%=genClass.getSafeUncapName()%>.getKey()).append(" -> ", <%=genModel.getImportedName("org.eclipse.emf.edit.provider.StyledString$Style")%>.QUALIFIER_STYLER).append("" + <%=genClass.getSafeUncapName()%>.getValue());<%=genModel.getNonNLS()%><%=genModel.getNonNLS(2)%>
  <%} else {%>
    <%if (genClass.getMapEntryKeyFeature().isPropertyMultiLine()) {%>
		String key = crop("" + <%=genClass.getSafeUncapName()%>.getKey());<%=genModel.getNonNLS()%>
    <%} else {%>
		String key = "" + <%=genClass.getSafeUncapName()%>.getKey();<%=genModel.getNonNLS()%>
    <%}%>
    <%if (genClass.getMapEntryValueFeature().isPropertyMultiLine()) {%>
		String value = crop("" + <%=genClass.getSafeUncapName()%>.getValue());<%=genModel.getNonNLS()%>
    <%} else {%>
		String value = "" + <%=genClass.getSafeUncapName()%>.getValue();<%=genModel.getNonNLS()%>
    <%}%>
		return new <%=genModel.getImportedName("org.eclipse.emf.edit.provider.StyledString")%>(key).append(" -> ", <%=genModel.getImportedName("org.eclipse.emf.edit.provider.StyledString$Style")%>.QUALIFIER_STYLER).append(value);<%=genModel.getNonNLS()%>
  <%}%>
<%} else if (genClass.getLabelFeature() != null) { GenFeature labelFeature = genClass.getLabelFeature();%>
  <%if (labelFeature.isPrimitiveType() && !labelFeature.getGenClass().isDynamic() && !labelFeature.isSuppressedGetVisibility()) {%>
		<%=genClass.getImportedInterfaceName()%><%=genClass.getInterfaceWildTypeArguments()%> <%=genClass.getSafeUncapName()%> = (<%=genClass.getImportedInterfaceName()%><%=genClass.getInterfaceWildTypeArguments()%>)object;
		return new <%=genModel.getImportedName("org.eclipse.emf.edit.provider.StyledString")%>(getString("_UI_<%=genClass.getName()%>_type"), <%=genModel.getImportedName("org.eclipse.emf.edit.provider.StyledString$Style")%>.QUALIFIER_STYLER).append(" ").append(<%=labelFeature.getObjectType(genClass)%>.toString(<%=genClass.getSafeUncapName()%>.<%=genClass.getLabelFeature().getGetAccessor()%>()));<%=genModel.getNonNLS()%><%=genModel.getNonNLS(2)%>
  <%} else {%>
    <%if (labelFeature.isStringType() && !labelFeature.getGenClass().isDynamic() && !labelFeature.isSuppressedGetVisibility()) {%>
      <%if (labelFeature.isPropertyMultiLine()) {%>
		String label = crop(((<%=genClass.getImportedInterfaceName()%><%=genClass.getInterfaceWildTypeArguments()%>)object).<%=labelFeature.getGetAccessor()%>());
      <%} else {%>
		String label = ((<%=genClass.getImportedInterfaceName()%><%=genClass.getInterfaceWildTypeArguments()%>)object).<%=labelFeature.getGetAccessor()%>();
      <%}%>
    <%} else {%>
      <%if (labelFeature.isSuppressedGetVisibility() || labelFeature.getGenClass().isDynamic()) {%>
		<%=genModel.getImportedName("java.lang.Object")%> labelValue = ((<%=genModel.getImportedName("org.eclipse.emf.ecore.EObject")%>)object).eGet(<%=labelFeature.getQualifiedFeatureAccessor()%>);
      <%} else {%>
		<%=labelFeature.getRawImportedType()%> labelValue = ((<%=genClass.getImportedInterfaceName()%><%=genClass.getInterfaceWildTypeArguments()%>)object).<%=labelFeature.getGetAccessor()%>();
      <%}%>
		String label = labelValue == null ? null : labelValue.toString();
    <%}%>
    	<%=genModel.getImportedName("org.eclipse.emf.edit.provider.StyledString")%> styledLabel = new <%=genModel.getImportedName("org.eclipse.emf.edit.provider.StyledString")%>();
		if (label == null || label.length() == 0) 
		{
			styledLabel.append(getString("_UI_<%=genClass.getName()%>_type"), <%=genModel.getImportedName("org.eclipse.emf.edit.provider.StyledString$Style")%>.QUALIFIER_STYLER); <%=genModel.getNonNLS()%>
		} else {
			styledLabel.append(getString("_UI_<%=genClass.getName()%>_type"), <%=genModel.getImportedName("org.eclipse.emf.edit.provider.StyledString$Style")%>.QUALIFIER_STYLER).append(" " + label);<%=genModel.getNonNLS()%><%=genModel.getNonNLS(2)%>
		}
		return styledLabel;
  <%}%>
<%} else {%>
		return new <%=genModel.getImportedName("org.eclipse.emf.edit.provider.StyledString")%>(getString("_UI_<%=genClass.getName()%>_type"));<%=genModel.getNonNLS()%>
<%}%>
<%@ end %><%//ItemProvider/getStyledText.override.javajetinc%>
	}	
<%}%>

	/**
	 * This handles model notifications by calling {@link #updateChildren} to update any cached
	 * children and by creating a viewer notification, which it passes to {@link #fireNotifyChanged}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
<%if (genModel.useClassOverrideAnnotation()) {%>
	@Override
<%}%>
	public void notifyChanged(Notification notification)
	{
		updateChildren(notification);
<%if (!genClass.getLabelNotifyFeatures().isEmpty() || !genClass.getContentNotifyFeatures().isEmpty() || !genClass.getLabelAndContentNotifyFeatures().isEmpty()) {%>

		switch (notification.getFeatureID(<%=genClass.getRawImportedInterfaceName()%>.class))
		{
  <%if (!genClass.getLabelNotifyFeatures().isEmpty()) {%>
    <%for (GenFeature genFeature : genClass.getLabelNotifyFeatures()) { %>
			case <%=genClass.getQualifiedFeatureID(genFeature)%>:
    <%}%>
				fireNotifyChanged(new <%=genModel.getImportedName("org.eclipse.emf.edit.provider.ViewerNotification")%>(notification, notification.getNotifier(), false, true));
				return;
  <%}%>
  <%if (!genClass.getContentNotifyFeatures().isEmpty()) {%>
    <%for (GenFeature genFeature : genClass.getContentNotifyFeatures()) { %>
			case <%=genClass.getQualifiedFeatureID(genFeature)%>:
    <%}%>
				fireNotifyChanged(new <%=genModel.getImportedName("org.eclipse.emf.edit.provider.ViewerNotification")%>(notification, notification.getNotifier(), true, false));
				return;
  <%}%>
  <%if (!genClass.getLabelAndContentNotifyFeatures().isEmpty()) {%>
    <%for (GenFeature genFeature : genClass.getLabelAndContentNotifyFeatures()) { %>
			case <%=genClass.getQualifiedFeatureID(genFeature)%>:
    <%}%>
				fireNotifyChanged(new <%=genModel.getImportedName("org.eclipse.emf.edit.provider.ViewerNotification")%>(notification, notification.getNotifier(), true, true));
				return;
  <%}%>
		}
<%}%>
		super.notifyChanged(notification);
	}

<%if (genModel.isCreationCommands()) {%>
	/**
	 * This adds {@link org.eclipse.emf.edit.command.CommandParameter}s describing the children
	 * that can be created under this object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
<%if (genModel.useClassOverrideAnnotation()) {%>
	@Override
<%}%>
	protected void collectNewChildDescriptors(<%=genModel.getImportedName(genModel.useGenerics() ? "java.util.Collection<java.lang.Object>" : "java.util.Collection")%> newChildDescriptors, Object object)
	{
		super.collectNewChildDescriptors(newChildDescriptors, object);
    <%for (GenClass.ChildCreationData childCreationData : genClass.getChildCreationData()) { GenFeature createFeature = childCreationData.createFeature; GenFeature delegatedFeature = childCreationData.delegatedFeature; GenClassifier createClassifier = childCreationData.createClassifier;%>
      <%if (createFeature.isFeatureMapType()) {%>
        <%if (delegatedFeature.isReferenceType()) { GenClass createClass = (GenClass)createClassifier;%>
<%@ include file="ItemProvider/newChildDescriptorsReferenceDelegatedFeature.override.javajetinc" fail="alternative"%>
<%@ start %>

		newChildDescriptors.add
			(createChildParameter
				(<%=createFeature.getQualifiedFeatureAccessor()%>,
				 <%=genModel.getImportedName("org.eclipse.emf.ecore.util.FeatureMapUtil")%>.createEntry
					(<%=delegatedFeature.getQualifiedFeatureAccessor()%>,
          <%if (createClass.isMapEntry()) { %>
					 <%=createClass.getGenPackage().getQualifiedEFactoryInstanceAccessor()%>.create(<%=createClass.getQualifiedClassifierAccessor()%>))));
          <%} else {%>
					 <%=createClass.getGenPackage().getQualifiedFactoryInstanceAccessor()%>.create<%=createClass.getName()%>())));
          <%}%>
<%@ include file="ItemProvider/newChildDescriptorsReferenceDelegatedFeature.insert.javajetinc" fail="silent"%>
<%@ end %><%//ItemProvider/newChildDescriptorsReferenceDelegatedFeature.override.javajetinc%>
        <%} else { GenDataType createDataType = (GenDataType)createClassifier;%>
<%@ include file="ItemProvider/newChildDescriptorsAttributeDelegatedFeature.override.javajetinc" fail="alternative"%>
<%@ start %>

		newChildDescriptors.add
			(createChildParameter
				(<%=createFeature.getQualifiedFeatureAccessor()%>,
				 <%=genModel.getImportedName("org.eclipse.emf.ecore.util.FeatureMapUtil")%>.createEntry
					(<%=delegatedFeature.getQualifiedFeatureAccessor()%>,
          <%if (delegatedFeature.isEnumBasedType()) {%>
					 <%=delegatedFeature.getTypeGenEnum().getStaticValue(delegatedFeature.getEcoreFeature().getDefaultValueLiteral())%>)));
          <%} else if (delegatedFeature.isStringBasedType()) {%>
					 <%=delegatedFeature.getCreateChildValueLiteral()%>)));<%=genModel.getNonNLS()%>
          <%} else { String literal = delegatedFeature.getCreateChildValueLiteral();%>
					 <%=createDataType.getGenPackage().getQualifiedEFactoryInstanceAccessor()%>.createFromString(<%=createDataType.getQualifiedClassifierAccessor()%>, <%=literal%>))));<%if (literal != null) {%><%=genModel.getNonNLS()%><%} else {%> // TODO: ensure this is a valid literal value<%}%>
          <%}%>
<%@ include file="ItemProvider/newChildDescriptorsAttributeDelegatedFeature.insert.javajetinc" fail="silent"%>
<%@ end %><%//ItemProvider/newChildDescriptorsAttributeDelegatedFeature.override.javajetinc%>
        <%}%>
      <%} else if (createFeature.isReferenceType()) { GenClass createClass = (GenClass)createClassifier;%>
<%@ include file="ItemProvider/newChildDescriptorsReferenceFeature.override.javajetinc" fail="alternative"%>
<%@ start %>

		newChildDescriptors.add
			(createChildParameter
				(<%=createFeature.getQualifiedFeatureAccessor()%>,
        <%if (createClass.isMapEntry()) { %>
				 <%=createClass.getGenPackage().getQualifiedEFactoryInstanceAccessor()%>.create(<%=createClass.getQualifiedClassifierAccessor()%>)));
        <%} else {%>
				 <%=createClass.getGenPackage().getQualifiedFactoryInstanceAccessor()%>.create<%=createClass.getName()%>()));
        <%}%>
<%@ include file="ItemProvider/newChildDescriptorsReferenceFeature.insert.javajetinc" fail="silent"%>
<%@ end %><%//ItemProvider/newChildDescriptorsReferenceFeature.override.javajetinc %>
      <%} else { GenDataType createDataType = (GenDataType)createClassifier;%>
<%@ include file="ItemProvider/newChildDescriptorsAttributeFeature.override.javajetinc" fail="alternative"%>
<%@ start %>

		newChildDescriptors.add
			(createChildParameter
				(<%=createFeature.getQualifiedFeatureAccessor()%>,
        <%if (createFeature.isEnumBasedType()) {%>
				 <%=createFeature.getTypeGenEnum().getStaticValue(createFeature.getEcoreFeature().getDefaultValueLiteral())%>));
        <%} else if (createFeature.isStringBasedType()) {%>
				 <%=createFeature.getCreateChildValueLiteral()%>));<%=genModel.getNonNLS()%>
        <%} else { String literal = createFeature.getCreateChildValueLiteral();%>
				 <%=createDataType.getGenPackage().getQualifiedEFactoryInstanceAccessor()%>.createFromString(<%=createDataType.getQualifiedClassifierAccessor()%>, <%=literal%>)));<%if (literal != null) {%><%=genModel.getNonNLS()%><%} else {%> // TODO: ensure this is a valid literal value<%}%>
        <%}%>
<%@ include file="ItemProvider/newChildDescriptorsAttributeFeature.insert.javajetinc" fail="silent"%>
<%@ end %><%//ItemProvider/newChildDescriptorsAttributeFeature.override.javajetinc%>
      <%}%>
    <%}%>
	}
	<% 
	// Here we override the command for removing ATypeinstances
	// This should only happen in the cases where no super TIs are present
	// at the object. In all otehr cases the following method should either
	// not be generated ot refer to the create Comamnd of the super class
	if (isInstanceOfICategoryAssignmentContainer) {
		genModel.getImportedName("org.eclipse.emf.ecore.EObject");
		genModel.getImportedName("org.eclipse.emf.ecore.EStructuralFeature");
		genModel.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand");	%>
	@Override
	protected Command createRemoveCommand(EditingDomain domain, EObject owner, EStructuralFeature feature, Collection<?> collection) {
		// In case that a Type Instance is inherited it will have some Super TIs being set.
		// Then the command for removing the TI should fail, because the inheritance
		// builder would regenerate it anyway
		for (Object obj : collection) {
			if (obj instanceof ATypeInstance) {
				ATypeInstance ti = (ATypeInstance) obj;
				if (!ti.getSuperTis().isEmpty()) {
					return UnexecutableCommand.INSTANCE;
				}
			}
		}
		
		// In all other cases create the usual command
		return super.createRemoveCommand(domain, owner, feature, collection);
	}<% } %>
	
	/**
	 * *********************************
	 * VirSat Specific Code Generation
	 * *********************************
 	 * Override to the createAddCommand Method
 	 * <!-- begin-user-doc -->
 	 * <!-- end-user-doc -->
 	 * @generated
 	*/
	@Override
	protected Command createAddCommand(EditingDomain domain, EObject owner, EStructuralFeature feature,	Collection<?> collection, int index) {
		<%	genModel.getImportedName("de.dlr.sc.virsat.model.dvlm.command.UndoableAddCommand");
			genModel.getImportedName("org.eclipse.emf.ecore.EObject");
			genModel.getImportedName("org.eclipse.emf.ecore.EStructuralFeature");
			genModel.getImportedName("java.util.Collection");
			genModel.getImportedName("org.eclipse.emf.edit.domain.EditingDomain");%>
		// Override functionality with the undoable ADD Command that performs undo by taking out the collection from the containing list
		// rather than reducing the index and assuming the last objects on the list have been added by the current command
		return new UndoableAddCommand(domain, owner, feature, collection, index);
	}
	
	/**
	 * *********************************
	 * VirSat Specific Code Generation
	 * *********************************
 	 * This pipes the command through our RoleManagmentCheckCommand, so we can check directly if a user is allowed to modify
 	 * <!-- begin-user-doc -->
 	 * <!-- end-user-doc -->
 	 * @generated
 	*/
	@Override
	public Command createCommand(Object object, EditingDomain domain, Class<? extends Command> commandClass, CommandParameter commandParameter) {
		<%if (isInstanceOfRepository || isInstanceOfStructuralElementInstance) {
		genModel.getImportedName("de.dlr.sc.virsat.model.dvlm.util.DVLMCommandParameterApplicableForCheck");
		genModel.getImportedName("org.eclipse.emf.edit.command.AddCommand");
		genModel.getImportedName("org.eclipse.emf.edit.command.CommandParameter");
		genModel.getImportedName("org.eclipse.emf.edit.command.CopyCommand");
		genModel.getImportedName("org.eclipse.emf.edit.command.CreateChildCommand");
		genModel.getImportedName("org.eclipse.emf.edit.command.CreateCopyCommand");
		genModel.getImportedName("org.eclipse.emf.edit.command.DragAndDropCommand");
		genModel.getImportedName("org.eclipse.emf.edit.command.InitializeCopyCommand");
		genModel.getImportedName("org.eclipse.emf.edit.command.MoveCommand");
		genModel.getImportedName("org.eclipse.emf.edit.command.ReplaceCommand");
		genModel.getImportedName("org.eclipse.emf.edit.command.SetCommand");
		genModel.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand");%>		
		// For the Repository and StructuralElementInstances we prefer the command for the aplicablefor paradigm
		// If the requested command is not valid for the current obejcts an unexecutable command will be handed back instead
		DVLMCommandParameterApplicableForCheck commandParameterCheck = new DVLMCommandParameterApplicableForCheck(commandParameter);
		if ((commandClass == SetCommand.class)
			|| (commandClass == CopyCommand.class)
			|| (commandClass == CreateCopyCommand.class)
			|| (commandClass == InitializeCopyCommand.class)
			|| (commandClass == AddCommand.class)
			|| (commandClass == MoveCommand.class)
			|| (commandClass == ReplaceCommand.class)
			|| (commandClass == DragAndDropCommand.class)
			|| (commandClass == CreateChildCommand.class)) {
			
			if (!commandParameterCheck.isValidCommandParameter(commandParameter)) {
				return new RoleManagementCheckCommand(UnexecutableCommand.INSTANCE, commandParameter);
			}
		}<%}
		if (isInstanceOfRepository) {
		// In case we create some commands on the repository we want that 
		// they will be forwarded into an unexecutable command. E.G we expect such
		// a behaviour for removing already active concepts. Such a command should
		// not be executable.		
		genModel.getImportedName("de.dlr.sc.virsat.model.dvlm.concepts.Concept");
		genModel.getImportedName("java.util.concurrent.atomic.AtomicBoolean");
		genModel.getImportedName("org.eclipse.emf.edit.command.DeleteCommand");
		genModel.getImportedName("org.eclipse.emf.edit.command.RemoveCommand");
		genModel.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand");%>		
		// We don't want to allow remove or delete operations on concepts that have been introduced into the model
		if ((commandClass == RemoveCommand.class) || (commandClass == DeleteCommand.class)) {
			AtomicBoolean removeConcept = new AtomicBoolean(false);
			commandParameter.getCollection().forEach((collectionObject) -> removeConcept.set(removeConcept.get() | collectionObject instanceof Concept));
			if (removeConcept.get() || (commandParameter.getValue() instanceof Concept)) {
				return UnexecutableCommand.INSTANCE;
			}
		} <%} else if (isInstanceOfArrayInstance) {
		// Arrays are specific as well. Only dynamic arrays should allow to remove
		// or delete items of them. Static arrays should never be changed
		// once they are initialized.
		genModel.getImportedName("org.eclipse.emf.ecore.EObject");
		genModel.getImportedName("org.eclipse.emf.edit.command.RemoveCommand");
		genModel.getImportedName("org.eclipse.emf.edit.command.AddCommand");
		genModel.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand");
		genModel.getImportedName("de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ComposedPropertyInstance");
		genModel.getImportedName("de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ReferencePropertyInstance");
		genModel.getImportedName("de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.command.ArrayInstance");
		genModel.getImportedName("de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.AProperty");
		genModel.getImportedName("de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StaticArrayModifier"); %>		
		// Make sure that we do not allow removing items of static arrays.
		// Only dynamic arrays should change in their size. Static ones are intialized
		// once and their size is kept forever.
		if ((commandClass == RemoveCommand.class) || (commandClass == AddCommand.class)) {
			
			EObject eOwner = commandParameter.getEOwner();
	    	EObject potentialArrayInstance =  null;
	    	
	    	if ((eOwner instanceof ComposedPropertyInstance) || (eOwner instanceof ReferencePropertyInstance)) {
	    		potentialArrayInstance = eOwner.eContainer();
	    	} else {
	    		potentialArrayInstance = eOwner;
	    	}
	    	
	    	if (potentialArrayInstance instanceof ArrayInstance) {
	    		ArrayInstance arrayInstance = (ArrayInstance) potentialArrayInstance;
	    		
	    		if (arrayInstance.getType() instanceof AProperty) {
	    			AProperty property = (AProperty) arrayInstance.getType();
	    			
	    			if (property.getArrayModifier() instanceof StaticArrayModifier) {
	    				return UnexecutableCommand.INSTANCE;
	    			}
	    		}
	    	}	  
	    }<%}%>
	    		
		// For all other commands get the original one
		Command originalCommand = super.createCommand(object, domain, commandClass, commandParameter);
		<%if (isInstanceOfValuePropertyInstance) {
		// Incase we are accessing the set value method of a derived data item
		// we want to have the override status being set, otherwise, the inehritance builder
		// will directly change back the changes that ahve been set with the setvalue method
		genModel.getImportedName("org.eclipse.emf.common.command.CompoundCommand");
		genModel.getImportedName("org.eclipse.emf.edit.command.SetCommand"); %>
		// In case we try to set the value we also want to make sure that the override attribute gets set
		if (commandClass == SetCommand.class && commandParameter.getEAttribute() == PropertyinstancesPackage.Literals.VALUE_PROPERTY_INSTANCE__VALUE) {
			Command setOverrideCommand = SetCommand.create(domain, object, InheritancePackage.Literals.IOVERRIDABLE_INHERITANCE_LINK__OVERRIDE, true);
			CompoundCommand setValueAndOverrideCommand = new CompoundCommand("Set Value and Override");
			setValueAndOverrideCommand.append(setOverrideCommand);
			setValueAndOverrideCommand.append(originalCommand);
			return setValueAndOverrideCommand;
	    }
	    <%}%>		
	    <%if (isInstanceOfResourcePropertyInstance) {
		// Incase we are accessing the set value method of a derived data item
		// we want to have the override status being set, otherwise, the inehritance builder
		// will directly change back the changes that ahve been set with the setvalue method
		genModel.getImportedName("org.eclipse.emf.common.command.CompoundCommand");
		genModel.getImportedName("org.eclipse.emf.edit.command.SetCommand"); %>
		// In case we try to set the value we also want to make sure that the override attribute gets set
		if (commandClass == SetCommand.class && commandParameter.getEAttribute() == PropertyinstancesPackage.Literals.RESOURCE_PROPERTY_INSTANCE__RESOURCE_URI) {
			Command setOverrideCommand = SetCommand.create(domain, object, InheritancePackage.Literals.IOVERRIDABLE_INHERITANCE_LINK__OVERRIDE, true);
			CompoundCommand setValueAndOverrideCommand = new CompoundCommand("Set Value and Override");
			setValueAndOverrideCommand.append(setOverrideCommand);
			setValueAndOverrideCommand.append(originalCommand);
			return setValueAndOverrideCommand;
	    }
	    <%}%>
	    <%if (isInstanceOfReferencePropertyInstance) {
		// Incase we are accessing the set value method of a derived data item
		// we want to have the override status being set, otherwise, the inehritance builder
		// will directly change back the changes that ahve been set with the setvalue method
		genModel.getImportedName("org.eclipse.emf.common.command.CompoundCommand");
		genModel.getImportedName("org.eclipse.emf.edit.command.SetCommand"); %>
		// In case we try to set the value we also want to make sure that the override attribute gets set
		if (commandClass == SetCommand.class && commandParameter.getEReference() == PropertyinstancesPackage.Literals.REFERENCE_PROPERTY_INSTANCE__REFERENCE) {
			Command setOverrideCommand = SetCommand.create(domain, object, InheritancePackage.Literals.IOVERRIDABLE_INHERITANCE_LINK__OVERRIDE, true);
			CompoundCommand setValueAndOverrideCommand = new CompoundCommand("Set Value and Override");
			setValueAndOverrideCommand.append(setOverrideCommand);
			setValueAndOverrideCommand.append(originalCommand);
			return setValueAndOverrideCommand;
	    }
	    <%}%>
	    <%if (isInstanceOfUnitValuePropertyInstance) {
		// Incase we are accessing the set value method of a derived data item
		// we want to have the override status being set, otherwise, the inehritance builder
		// will directly change back the changes that have been set with the setvalue method
		genModel.getImportedName("org.eclipse.emf.common.command.CompoundCommand");
		genModel.getImportedName("org.eclipse.emf.edit.command.SetCommand"); %>
		// In case we try to set the value we also want to make sure that the override attribute gets set
		if (commandClass == SetCommand.class && (commandParameter.getEReference() == PropertyinstancesPackage.Literals.IUNIT_PROPERTY_INSTANCE__UNIT || commandParameter.getEAttribute() == PropertyinstancesPackage.Literals.VALUE_PROPERTY_INSTANCE__VALUE)) {
			Command setOverrideCommand = SetCommand.create(domain, object, InheritancePackage.Literals.IOVERRIDABLE_INHERITANCE_LINK__OVERRIDE, true);
			CompoundCommand setValueAndOverrideCommand = new CompoundCommand("Set Value and Override");
			setValueAndOverrideCommand.append(setOverrideCommand);
			setValueAndOverrideCommand.append(originalCommand);
			return setValueAndOverrideCommand;
	    }
	    <%}%>		
	    <%if (isInstanceOfCategoryAssignment) {
		// Incase we are accessing the set value method of a category assignment
		// We need to check if it has been inherited and if that is the case
		// We disallow changing the name via the set method
		genModel.getImportedName("org.eclipse.emf.edit.command.SetCommand"); 
		genModel.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand"); %>
		if (commandClass == SetCommand.class && commandParameter.getFeature() == GeneralPackage.Literals.INAME__NAME) {
			CategoryAssignment ca = (CategoryAssignment) object;
			if (ca.isIsInherited()) {
				return UnexecutableCommand.INSTANCE;
			}
		}
	    <%}%>	
		// A RolemanagementCheckCommand should not necessarily be wrapped into another RoleManagementCheck Command
		if (originalCommand instanceof RoleManagementCheckCommand) {
			return originalCommand;
		} else {
			// And wrap it into our command checking for the proper access rights
			return new RoleManagementCheckCommand(originalCommand, commandParameter);	
		}
	}

  <%if (!genClass.getSharedClassCreateChildFeatures().isEmpty()) {%>
	/**
	 * This returns the label text for {@link org.eclipse.emf.edit.command.CreateChildCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
<%if (genModel.useClassOverrideAnnotation()) {%>
	@Override
<%}%>
	public String getCreateChildText(Object owner, Object feature, Object child, <%=genModel.getImportedName(genModel.useGenerics() ? "java.util.Collection<?>" : "java.util.Collection")%> selection)
	{
		Object childFeature = feature;
		Object childObject = child;

    <%if (genClass.hasFeatureMapCreateChildFeatures()) {%>
		if (childFeature instanceof <%=genModel.getImportedName("org.eclipse.emf.ecore.EStructuralFeature")%> && <%=genModel.getImportedName("org.eclipse.emf.ecore.util.FeatureMapUtil")%>.isFeatureMap((EStructuralFeature)childFeature))
		{
			<%=genModel.getImportedName("org.eclipse.emf.ecore.util.FeatureMap")%>.Entry entry = (FeatureMap.Entry)childObject;
			childFeature = entry.getEStructuralFeature();
			childObject = entry.getValue();
		}

    <%}%>
		boolean qualify =
    <%for (Iterator<GenFeature> i = genClass.getSharedClassCreateChildFeatures().iterator(); i.hasNext();) { GenFeature createFeature = i.next();%>
			childFeature == <%=createFeature.getQualifiedFeatureAccessor()%><%=i.hasNext() ? " ||" : ";"%>
    <%}%>

		if (qualify)
		{
			return getString
				("_UI_CreateChild_text2",<%=genModel.getNonNLS()%>
				 new Object[] { getTypeText(childObject), getFeatureText(childFeature), getTypeText(owner) });
		}
		return super.getCreateChildText(owner, feature, child, selection);
	}

  <%}%>
<%}%>
<%if (genClass.getProviderExtendsGenClass() == null || genClass.getProviderExtendsGenClass().getGenPackage() != genPackage && (!genPackage.isExtensibleProviderFactory() || genClass.getProviderExtendsGenClass().getGenPackage().isExtensibleProviderFactory() != genPackage.isExtensibleProviderFactory())) {%>
	/**
	 * Return the resource locator for this item provider's resources.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
<%if (genModel.useClassOverrideAnnotation()) {%>
	@Override
<%}%>
	public <%=genModel.getImportedName("org.eclipse.emf.common.util.ResourceLocator")%> getResourceLocator()
	{
<%if (genPackage.isExtensibleProviderFactory()) {%>
		return ((<%=genModel.getImportedName("org.eclipse.emf.edit.provider.IChildCreationExtender")%>)adapterFactory).getResourceLocator();
<%} else {%>
		return <%=genPackage.getImportedEditPluginClassName()%>.INSTANCE;
<%}%>
	}

<%}%>
<%@ include file="ItemProvider/insert.javajetinc" fail="silent" %>
}
<%genModel.emitSortedImports();%>
