/*******************************************************************************
 * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *******************************************************************************/
package de.dlr.sc.virsat.model.extension.tests.tests.provider;

import de.dlr.sc.virsat.model.extension.tests.tests.util.TestsAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TestsItemProviderAdapterFactory extends TestsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TestsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.extension.tests.tests.TestCategoryAllProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestCategoryAllPropertyItemProvider testCategoryAllPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.extension.tests.tests.TestCategoryAllProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestCategoryAllPropertyAdapter() {
		if (testCategoryAllPropertyItemProvider == null) {
			testCategoryAllPropertyItemProvider = new TestCategoryAllPropertyItemProvider(this);
		}

		return testCategoryAllPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.extension.tests.tests.TestCategoryComposition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestCategoryCompositionItemProvider testCategoryCompositionItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.extension.tests.tests.TestCategoryComposition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestCategoryCompositionAdapter() {
		if (testCategoryCompositionItemProvider == null) {
			testCategoryCompositionItemProvider = new TestCategoryCompositionItemProvider(this);
		}

		return testCategoryCompositionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.extension.tests.tests.TestCategoryReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestCategoryReferenceItemProvider testCategoryReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.extension.tests.tests.TestCategoryReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestCategoryReferenceAdapter() {
		if (testCategoryReferenceItemProvider == null) {
			testCategoryReferenceItemProvider = new TestCategoryReferenceItemProvider(this);
		}

		return testCategoryReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.extension.tests.tests.TestCategoryIntrinsicArray} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestCategoryIntrinsicArrayItemProvider testCategoryIntrinsicArrayItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.extension.tests.tests.TestCategoryIntrinsicArray}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestCategoryIntrinsicArrayAdapter() {
		if (testCategoryIntrinsicArrayItemProvider == null) {
			testCategoryIntrinsicArrayItemProvider = new TestCategoryIntrinsicArrayItemProvider(this);
		}

		return testCategoryIntrinsicArrayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.extension.tests.tests.TestCategoryCompositionArray} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestCategoryCompositionArrayItemProvider testCategoryCompositionArrayItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.extension.tests.tests.TestCategoryCompositionArray}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestCategoryCompositionArrayAdapter() {
		if (testCategoryCompositionArrayItemProvider == null) {
			testCategoryCompositionArrayItemProvider = new TestCategoryCompositionArrayItemProvider(this);
		}

		return testCategoryCompositionArrayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.extension.tests.tests.TestCategoryReferenceArray} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestCategoryReferenceArrayItemProvider testCategoryReferenceArrayItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.extension.tests.tests.TestCategoryReferenceArray}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestCategoryReferenceArrayAdapter() {
		if (testCategoryReferenceArrayItemProvider == null) {
			testCategoryReferenceArrayItemProvider = new TestCategoryReferenceArrayItemProvider(this);
		}

		return testCategoryReferenceArrayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.extension.tests.tests.TestCategoryBeanA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestCategoryBeanAItemProvider testCategoryBeanAItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.extension.tests.tests.TestCategoryBeanA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestCategoryBeanAAdapter() {
		if (testCategoryBeanAItemProvider == null) {
			testCategoryBeanAItemProvider = new TestCategoryBeanAItemProvider(this);
		}

		return testCategoryBeanAItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.extension.tests.tests.TestCategoryBeanB} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestCategoryBeanBItemProvider testCategoryBeanBItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.extension.tests.tests.TestCategoryBeanB}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestCategoryBeanBAdapter() {
		if (testCategoryBeanBItemProvider == null) {
			testCategoryBeanBItemProvider = new TestCategoryBeanBItemProvider(this);
		}

		return testCategoryBeanBItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.extension.tests.tests.TestCategoryBeanConcrete} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestCategoryBeanConcreteItemProvider testCategoryBeanConcreteItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.extension.tests.tests.TestCategoryBeanConcrete}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestCategoryBeanConcreteAdapter() {
		if (testCategoryBeanConcreteItemProvider == null) {
			testCategoryBeanConcreteItemProvider = new TestCategoryBeanConcreteItemProvider(this);
		}

		return testCategoryBeanConcreteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.extension.tests.tests.TestCategoryBase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestCategoryBaseItemProvider testCategoryBaseItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.extension.tests.tests.TestCategoryBase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestCategoryBaseAdapter() {
		if (testCategoryBaseItemProvider == null) {
			testCategoryBaseItemProvider = new TestCategoryBaseItemProvider(this);
		}

		return testCategoryBaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.extension.tests.tests.TestCategoryExtends} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestCategoryExtendsItemProvider testCategoryExtendsItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.extension.tests.tests.TestCategoryExtends}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestCategoryExtendsAdapter() {
		if (testCategoryExtendsItemProvider == null) {
			testCategoryExtendsItemProvider = new TestCategoryExtendsItemProvider(this);
		}

		return testCategoryExtendsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.extension.tests.tests.TestParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestParameterItemProvider testParameterItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.extension.tests.tests.TestParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestParameterAdapter() {
		if (testParameterItemProvider == null) {
			testParameterItemProvider = new TestParameterItemProvider(this);
		}

		return testParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.extension.tests.tests.TestMassParameters} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestMassParametersItemProvider testMassParametersItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.extension.tests.tests.TestMassParameters}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestMassParametersAdapter() {
		if (testMassParametersItemProvider == null) {
			testMassParametersItemProvider = new TestMassParametersItemProvider(this);
		}

		return testMassParametersItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (testCategoryAllPropertyItemProvider != null) testCategoryAllPropertyItemProvider.dispose();
		if (testCategoryCompositionItemProvider != null) testCategoryCompositionItemProvider.dispose();
		if (testCategoryReferenceItemProvider != null) testCategoryReferenceItemProvider.dispose();
		if (testCategoryIntrinsicArrayItemProvider != null) testCategoryIntrinsicArrayItemProvider.dispose();
		if (testCategoryCompositionArrayItemProvider != null) testCategoryCompositionArrayItemProvider.dispose();
		if (testCategoryReferenceArrayItemProvider != null) testCategoryReferenceArrayItemProvider.dispose();
		if (testCategoryBeanAItemProvider != null) testCategoryBeanAItemProvider.dispose();
		if (testCategoryBeanBItemProvider != null) testCategoryBeanBItemProvider.dispose();
		if (testCategoryBeanConcreteItemProvider != null) testCategoryBeanConcreteItemProvider.dispose();
		if (testCategoryBaseItemProvider != null) testCategoryBaseItemProvider.dispose();
		if (testCategoryExtendsItemProvider != null) testCategoryExtendsItemProvider.dispose();
		if (testParameterItemProvider != null) testParameterItemProvider.dispose();
		if (testMassParametersItemProvider != null) testMassParametersItemProvider.dispose();
	}

}
