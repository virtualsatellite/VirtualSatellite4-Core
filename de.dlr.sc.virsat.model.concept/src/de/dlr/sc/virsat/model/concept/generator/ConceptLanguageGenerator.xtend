/*******************************************************************************
 * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *******************************************************************************/
/*
 * generated by Xtext
 */
package de.dlr.sc.virsat.model.concept.generator

import de.dlr.sc.virsat.model.concept.generator.beans.GenerateCategoryBeans
import de.dlr.sc.virsat.model.concept.generator.beans.GenerateStructuralElementBeans
import de.dlr.sc.virsat.model.concept.generator.commands.GenerateArrayCreateAddCommand
import de.dlr.sc.virsat.model.concept.generator.commands.GenerateCategoryCreateAddCommand
import de.dlr.sc.virsat.model.concept.generator.dmf.GenerateDmfCategories
import de.dlr.sc.virsat.model.concept.generator.handler.GenerateCategoryAddHandler
import de.dlr.sc.virsat.model.concept.generator.handler.GenerateStructuralElementInstanceAddHandler
import de.dlr.sc.virsat.model.concept.generator.migrator.GenerateMigrator
import de.dlr.sc.virsat.model.concept.generator.plugin.GenerateConceptImages
import de.dlr.sc.virsat.model.concept.generator.plugin.GeneratePluginXml
import de.dlr.sc.virsat.model.concept.generator.plugin.GenerateUiPluginXml
import de.dlr.sc.virsat.model.concept.generator.plugin.PluginXmlReader
import de.dlr.sc.virsat.model.concept.generator.propertyTester.GenerateConceptEnabledTester
import de.dlr.sc.virsat.model.concept.generator.snippets.GenerateCategoryUiSnippetArrayTable
import de.dlr.sc.virsat.model.concept.generator.snippets.GenerateCategoryUiSnippetPropertySection
import de.dlr.sc.virsat.model.concept.generator.snippets.GenerateCategoryUiSnippetTable
import de.dlr.sc.virsat.model.concept.generator.tests.GenerateAllTests
import de.dlr.sc.virsat.model.concept.generator.tests.GenerateCategoryTests
import de.dlr.sc.virsat.model.concept.generator.tests.GenerateMigratorTests
import de.dlr.sc.virsat.model.concept.generator.tests.GenerateValidatorTests
import de.dlr.sc.virsat.model.concept.generator.tests.GenerateStructuralElementTests
import de.dlr.sc.virsat.model.concept.generator.validator.GenerateValidator
import de.dlr.sc.virsat.model.concept.generator.validator.GenerateDeprecatedValidator
import de.dlr.sc.virsat.model.concept.generator.xmi.GenerateConceptXmi
import de.dlr.sc.virsat.model.dvlm.concepts.Concept
import org.eclipse.core.runtime.Platform
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGenerator2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ConceptLanguageGenerator implements IGenerator2 {
	
	val ID_EXTENSION_POINT_GENERATOR = "de.dlr.sc.virsat.model.concept.generator"
	val ID_EXTENSION_POINT_GENERATOR_ENABLEMENT_CLASS = "class"
	override afterGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {

	}

	override beforeGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {

	}
	
	/**
	 * Entry method from the xtend generator fragment
	 */
	override doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
	
		// Call the extension point factory to see if someone wants to
		// define externally if we generate code or not.		
		val extensionPointRegistry = Platform.getExtensionRegistry();
		val configElements = extensionPointRegistry.getConfigurationElementsFor(ID_EXTENSION_POINT_GENERATOR);

		// If not specified in any other way we want to generate code
		var boolean generateCode = true;
		
		// See if one of the config elements from our extension point tells us to not generate code
		// usually this can be told from one of the toggle buttons in our UI
		for (configElement : configElements){
			val IConceptGeneratorEnablement generatorEnablement = configElement.createExecutableExtension(ID_EXTENSION_POINT_GENERATOR_ENABLEMENT_CLASS) as IConceptGeneratorEnablement;
			generateCode = generateCode && generatorEnablement.generatorEnabled;			
		}

		// Only generate the code if it is actually desired to do so
		if (generateCode) {
			// Get the Data Model and retrieve the Name of it
			val conceptPreprocessor = new ConceptPreprocessor(fsa)
			val dataModel = conceptPreprocessor.process(resource)
			
			//Check if there is a deprecated validator
			val hasDeprecatedValidator = fsa.isFile('../src/' + dataModel.name.replace(".","/") +'/validator/StructuralElementInstanceValidator.java');	
			
			new GenerateDmfCategories().serializeModel(dataModel, fsa);
			new GenerateConceptImages().serializeModel(dataModel, fsa);
			new GenerateCategoryBeans().serializeModel(dataModel, fsa);
			new GenerateStructuralElementBeans().serializeModel(dataModel, fsa);
			new GenerateCategoryAddHandler().serializeModel(dataModel, fsa);
			new GenerateStructuralElementInstanceAddHandler().serializeModel(dataModel, fsa);
			new GenerateCategoryCreateAddCommand().serializeModel(dataModel, fsa);
			new GenerateArrayCreateAddCommand().serializeModel(dataModel, fsa);
			new GenerateCategoryUiSnippetTable().serializeModel(dataModel, fsa);
			new GenerateCategoryUiSnippetArrayTable().serializeModel(dataModel, fsa);
			new GenerateCategoryUiSnippetPropertySection().serializeModel(dataModel, fsa);
			new GenerateUiPluginXml().serializeModel(dataModel, new PluginXmlReader(), fsa);
			new GeneratePluginXml().serializeModel(dataModel, new PluginXmlReader(), fsa);
			new GenerateValidator().serializeModel(dataModel, fsa);
			new GenerateMigrator().serializeModel(dataModel, fsa);
			new GenerateConceptEnabledTester().serializeModel(dataModel, fsa);
			
			// Generate Code for Test fragment
			new GenerateCategoryTests().serializeModel(dataModel, fsa);
			new GenerateStructuralElementTests().serializeModel(dataModel, fsa);
			new GenerateMigratorTests().serializeModel(dataModel, fsa);
			new GenerateValidatorTests().serializeModel(dataModel, fsa);
			new GenerateAllTests().serializeModel(dataModel, fsa);
		
			// Generate validator and mark it as deprecated
			if (hasDeprecatedValidator == true) {
				new GenerateDeprecatedValidator().serializeModel(dataModel, fsa);
				new GeneratePluginXml().serializeModelDeprecatedValidator(dataModel, new PluginXmlReader(), fsa);
				
			}
		}
	}
}
