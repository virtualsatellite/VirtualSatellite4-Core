/*******************************************************************************
 * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *******************************************************************************/
package de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.provider;

import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.util.PropertydefinitionsAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemFontProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PropertydefinitionsItemProviderAdapterFactory extends PropertydefinitionsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PropertydefinitionsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
		supportedTypes.add(IItemFontProvider.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ComposedProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedPropertyItemProvider composedPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ComposedProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComposedPropertyAdapter() {
		if (composedPropertyItemProvider == null) {
			composedPropertyItemProvider = new ComposedPropertyItemProvider(this);
		}

		return composedPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ReferenceProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferencePropertyItemProvider referencePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ReferenceProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReferencePropertyAdapter() {
		if (referencePropertyItemProvider == null) {
			referencePropertyItemProvider = new ReferencePropertyItemProvider(this);
		}

		return referencePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EReferencePropertyItemProvider eReferencePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEReferencePropertyAdapter() {
		if (eReferencePropertyItemProvider == null) {
			eReferencePropertyItemProvider = new EReferencePropertyItemProvider(this);
		}

		return eReferencePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntPropertyItemProvider intPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntPropertyAdapter() {
		if (intPropertyItemProvider == null) {
			intPropertyItemProvider = new IntPropertyItemProvider(this);
		}

		return intPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FloatPropertyItemProvider floatPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFloatPropertyAdapter() {
		if (floatPropertyItemProvider == null) {
			floatPropertyItemProvider = new FloatPropertyItemProvider(this);
		}

		return floatPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringPropertyItemProvider stringPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringPropertyAdapter() {
		if (stringPropertyItemProvider == null) {
			stringPropertyItemProvider = new StringPropertyItemProvider(this);
		}

		return stringPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanPropertyItemProvider booleanPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanPropertyAdapter() {
		if (booleanPropertyItemProvider == null) {
			booleanPropertyItemProvider = new BooleanPropertyItemProvider(this);
		}

		return booleanPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumPropertyItemProvider enumPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumPropertyAdapter() {
		if (enumPropertyItemProvider == null) {
			enumPropertyItemProvider = new EnumPropertyItemProvider(this);
		}

		return enumPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumValueDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumValueDefinitionItemProvider enumValueDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumValueDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumValueDefinitionAdapter() {
		if (enumValueDefinitionItemProvider == null) {
			enumValueDefinitionItemProvider = new EnumValueDefinitionItemProvider(this);
		}

		return enumValueDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourcePropertyItemProvider resourcePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourcePropertyAdapter() {
		if (resourcePropertyItemProvider == null) {
			resourcePropertyItemProvider = new ResourcePropertyItemProvider(this);
		}

		return resourcePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StaticArrayModifier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StaticArrayModifierItemProvider staticArrayModifierItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StaticArrayModifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStaticArrayModifierAdapter() {
		if (staticArrayModifierItemProvider == null) {
			staticArrayModifierItemProvider = new StaticArrayModifierItemProvider(this);
		}

		return staticArrayModifierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.DynamicArrayModifier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DynamicArrayModifierItemProvider dynamicArrayModifierItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.DynamicArrayModifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDynamicArrayModifierAdapter() {
		if (dynamicArrayModifierItemProvider == null) {
			dynamicArrayModifierItemProvider = new DynamicArrayModifierItemProvider(this);
		}

		return dynamicArrayModifierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IVerificationSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IVerificationSpecificationItemProvider iVerificationSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IVerificationSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIVerificationSpecificationAdapter() {
		if (iVerificationSpecificationItemProvider == null) {
			iVerificationSpecificationItemProvider = new IVerificationSpecificationItemProvider(this);
		}

		return iVerificationSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.VerificationTypeSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VerificationTypeSpecificationItemProvider verificationTypeSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.VerificationTypeSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVerificationTypeSpecificationAdapter() {
		if (verificationTypeSpecificationItemProvider == null) {
			verificationTypeSpecificationItemProvider = new VerificationTypeSpecificationItemProvider(this);
		}

		return verificationTypeSpecificationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (composedPropertyItemProvider != null) composedPropertyItemProvider.dispose();
		if (referencePropertyItemProvider != null) referencePropertyItemProvider.dispose();
		if (eReferencePropertyItemProvider != null) eReferencePropertyItemProvider.dispose();
		if (intPropertyItemProvider != null) intPropertyItemProvider.dispose();
		if (floatPropertyItemProvider != null) floatPropertyItemProvider.dispose();
		if (stringPropertyItemProvider != null) stringPropertyItemProvider.dispose();
		if (booleanPropertyItemProvider != null) booleanPropertyItemProvider.dispose();
		if (enumPropertyItemProvider != null) enumPropertyItemProvider.dispose();
		if (enumValueDefinitionItemProvider != null) enumValueDefinitionItemProvider.dispose();
		if (resourcePropertyItemProvider != null) resourcePropertyItemProvider.dispose();
		if (staticArrayModifierItemProvider != null) staticArrayModifierItemProvider.dispose();
		if (dynamicArrayModifierItemProvider != null) dynamicArrayModifierItemProvider.dispose();
		if (iVerificationSpecificationItemProvider != null) iVerificationSpecificationItemProvider.dispose();
		if (verificationTypeSpecificationItemProvider != null) verificationTypeSpecificationItemProvider.dispose();
	}

}
